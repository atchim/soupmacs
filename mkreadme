#!/usr/bin/env fennel

(local
  { : eval
    : list?
    : multi-sym?
    : parser
    : sequence?
    : string-stream
    : sym?
    : view}
  (require :fennel))

(lambda fn? [node]
  "Returns `true` when `node` is a kind of function."
  (when (not (sym? node))
    (-?>
      (list? node)
      (. 1)
      (sym?)
      (tostring)
      (match (where (or :fn :lambda :Î»)) true))))

(lambda mac? [node]
  "Returns the name, parameters and docstring if `node` is a module macro."
  (when (fn? node)
    (let
      [ name-syms (-?> (. node 2) (multi-sym?))
        params (-?> (. node 3) (sequence?))
        docs (. node 4)]
      (when
        (and name-syms (= :M (. name-syms 1)) params (= :string (type docs)))
        (->
          [(unpack name-syms 2)]
          (table.concat :.)
          (values params docs))))))

(lambda evalsnips [mac docs]
  "Evaluates all Fennel code snippets present in `docs` of `mac`."
  (var i 1)
  (var finding? true)
  (while finding?
    (let [(start end code) (docs:find "```fennel\n(.-)```" i)]
      (if start (do (eval code) (set i end)) (set finding? false)))))

; TODO: Make long macro subsections collapsible.
(lambda mdsnip [mac params docs h]
  "Returns a Markdown snippet made from given arguments."
  (let
    [ h (: :# :rep h)
      header (.. h " `" mac " " (view params) "`\n")
      (_ _ offset) (docs:find "\n\n(%s+)")
      docs (if offset (docs:gsub (.. "\n" offset) "\n") docs)
      docs (docs:gsub "\n(#+)" #(.. "\n" h $1))]
    (.. header "\n" docs)))

(let
  [ md
    "# Soup Macros

> A collection of useful macros for [Fennel].

${MACROS}

[Fennel]: https://fennel-lang.org"
    h 3]
  (var patch "")
  (with-open [f (assert (io.open :soupmacs.fnl :r))]
    (let [text (assert (f:read :*all)) parser (parser (string-stream text))]
      (each [ok? node parser]
        (assert ok?)
        (let [(mac params docs) (mac? node)]
          (when mac
            (evalsnips mac docs)
            (set patch (.. patch "\n\n" (mdsnip mac params docs h))))))))
  (let [md (md:gsub "%${MACROS}" (.. "## Macros" patch))]
    (with-open [f (assert (io.open :README.md :w+))] (f:write md))))
